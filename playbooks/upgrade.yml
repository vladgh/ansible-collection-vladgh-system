---
- name: Upgrade everything
  hosts: upgrade
  become: true
  tasks:
    - name: Upgrade Debian Systems
      when: ansible_facts['os_family'] is defined and ansible_facts['os_family'] == 'Debian'
      block:
        - name: Update apt-get repo and cache
          ansible.builtin.apt:
            update_cache: true
            force_apt_get: true
            cache_valid_time: 21600  # Update the apt cache if its older than 6 hours
        - name: Upgrade all apt packages
          ansible.builtin.apt:
            upgrade: dist
        - name: Remove dependencies that are no longer required
          ansible.builtin.apt:
            autoremove: true
            purge: true
        - name: Remove useless packages from the cache
          ansible.builtin.apt:
            autoclean: true
        # - name: Check if a reboot is needed on all servers
        #   ansible.builtin.register: reboot_required_file
        #   stat:
        #     path: /var/run/reboot-required
        #     get_md5: false
        # - name: Reboot the box if kernel updated
        #   ansible.builtin.reboot:
        #     msg: "Reboot initiated by Ansible for kernel updates"
        #     connect_timeout: 5
        #     reboot_timeout: 300
        #     pre_reboot_delay: 0
        #     post_reboot_delay: 30
        #     test_command: uptime
        #   when: reboot_required_file.stat.exists and inventory_hostname != 'vdev'
        - name: Update Pip system wide packages
          ansible.builtin.pip:
            name: "{{ pip_install_packages }}"
            state: "{{ item.state | default('present') }}"
            executable: "{{ pip_executable | default('pip3') }}"
          when: pip_install_packages is defined and pip_install_packages | length > 0
        - name: Update Pip user packages
          become: true
          become_user: "{{ item.user }}"
          ansible.builtin.pip:
            name: "{{ item.packages }}"
            state: "{{ item.state | default('present') }}"
            extra_args: --user
            executable: "{{ pip_executable | default('pip3') }}"
          loop: "{{ pip_user_install_packages }}"
          when: pip_user_install_packages is defined and pip_user_install_packages | length > 0

---
- name: Ensure stack directory exists
  ansible.builtin.file:
    path: "{{ docker_compose_stack_path }}/{{ item.name }}"
    state: directory
    mode: '0755'
  when: item.name is defined and item.name
  loop: "{{ docker_compose_stack }}"
  loop_control:
    label: "{{ item.name }}"

- name: Configure DotEnv
  ansible.builtin.copy:
    content: |
      # DO NOT USE QUOTES TO ENCLOSE THE VALUES
      # https://docs.docker.com/compose/env-file/#syntax-rules
      {% for env_item in all_vars | dict2items %}
      {{ env_item.key }}={{ env_item.value }}
      {% endfor %}
    dest: "{{ docker_compose_stack_path }}/{{ item.name }}/.env"
    owner: root
    group: root
    mode: '0644'
  vars:
    all_vars: "{{ item.env | default({}) }}"
  when: >
    ( item.name is defined and item.name ) and
    ( item.env is defined and item.env )
  loop: "{{ docker_compose_stack }}"
  loop_control:
    label: "{{ item.name }}"

- name: Copy files  # noqa no-relative-paths
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/files/appstack/{{ item.name }}/"
    dest: "{{ docker_compose_stack_path }}/{{ item.name }}/"
    decrypt: true
    owner: root
    group: root
    mode: '0644'
  when: item.name is defined and item.name
  loop: "{{ docker_compose_stack }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create external networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
  when: docker_networks is defined and docker_networks
  loop: "{{ docker_networks }}"

- name: Pull docker images  # noqa command-instead-of-shell
  ansible.builtin.shell:
    cmd: /usr/bin/docker compose pull
    chdir: "{{ docker_compose_stack_path }}/{{ item.name }}"
  register: docker_compose_stack_pull
  changed_when: ('Extracting' in docker_compose_stack_pull.stderr)
  when: item.name is defined and item.name
  loop: "{{ docker_compose_stack }}"
  loop_control:
    label: "{{ item.name }}"

- name: Start stack  # noqa command-instead-of-shell
  ansible.builtin.shell:
    cmd: /usr/bin/docker compose up --detach --remove-orphans
    chdir: "{{ docker_compose_stack_path }}/{{ item.name }}"
  register: docker_compose_stack_up
  changed_when: ('Created' in docker_compose_stack_up.stderr or 'Recreated' in docker_compose_stack_up.stderr)
  when: item.name is defined and item.name
  loop: "{{ docker_compose_stack }}"
  loop_control:
    label: "{{ item.name }}"
